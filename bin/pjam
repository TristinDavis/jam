#!/usr/bin/env ruby

require "rubygems"; 
require 'trollop'
require "json"; 
require 'term/ansicolor'
include Term::ANSIColor

opts = Trollop::options do

  version "pjam 0.1.2 (c) 2013 Alexey Melezhik / melezhik@gmail.com"
  banner <<-EOS
smart glue between pinto and your scm.

Usage:
       pjam [options]
where [options] are:
EOS

    opt :p, "path to project", :type => :string
    opt :skip_pinto, "skip pinto phase, only do distibution phase", :default => false
    opt :dry_run, "run in dry-run mode; dry-run mode is enabled, only upcoming changes will be shown, no action will be taken", :default => false
    opt :no_color, "do not colour output", :default => false
    opt :no_misc, "do not add miscellaneous prerequisites", :default => false
    opt :only, "only add given source(s). multiple sources are separated by comma", :type => :string, :default => nil
    opt :only_pinto, "only do pinto phase, skip distribution phase", :default => false
end

version_postfix = `date +-rev-%Y-%B-%d-%H-%M`.chomp!

if (opts[:p].nil? || opts[:p].empty?)
    Trollop::die :p, "must be set"
end

project_id = "#{Dir.pwd}/#{opts[:p]}"
local_lib = "#{project_id}/cpanlib"

config = JSON.parse(File.read("#{project_id}/pjam.json"))

if config.has_key? 'repository'
	repo_root = "-r #{config['reposity']}"
else
	repo_root = "-r #{ENV['PINTO_REPOSITORY_ROOT']}"
end

if opts[:no_color] == true
	puts "pinto repository root: #{repo_root}"
else
	puts dark { green { bold {  "pinto repository root: #{repo_root}" } } }
end

if config.has_key? 'override'
	override = config['override']
else
	override = true
end

if opts[:no_color] == true
	puts "override mode: #{override}"
else
	puts dark { cyan { bold {  "override mode: #{override}" } } }
end

sources_list = []
only_list = []
if opts[:only].nil?
    sources_list = config['sources']
else
    p_only = opts[:only].split(/\s+/)
    only_list = p_only	
    sources_list = config['sources'].select {|i| p_only.include? i }
end

compile_list = []
compile_list_pp = {}


if opts[:no_color] == true
	puts "generated version postfix: #{version_postfix}"
else
	puts dark { yellow { bold {  "generated version postfix: #{version_postfix}" } } }
end


if opts[:no_color] == true
    color_flag = '--no-color'
else
    color_flag = ''
end

misc_modules =  []

if opts[:dry_run] == true
    if opts[:no_color] == true
	puts "dry-run mode is enabled, only upcoming changes will be shown, no action will be taken"
    else
	puts dark { magenta  { bold {  "dry-run mode is enabled, only upcoming changes will be shown, no action will be taken" } } }
    end

	sources_list.each do |src|
    		cmd = "cd #{project_id}/#{src} &&  svn log -r BASE:HEAD --verbose . > dry-run.log"
    		st = system(cmd) == true or  raise "failed do cmd: #{cmd}"

		if opts[:no_color] == true
			puts "upcoming changes for #{src}:"
		else
	    		puts dark { magenta  { bold {  "upcoming changes for #{src}:" } } }
		end
		
		puts File.read("#{project_id}/#{src}/dry-run.log") 
	end
	exit(0)
end

if config.has_key? 'modules' and opts[:no_misc] == false and opts[:skip_pinto] == false

    if opts[:no_color] == true
	puts "pulling misc modules"
    else
	puts dark { blue  { bold {  "pulling misc modules" } } }
    end
    
    config['modules'].each do |m|

	if opts[:no_color] == true
	    puts "pull #{m}"
	else
	    puts dark { magenta { bold {  "pull #{m}" } } }
	end
	cmd ="pinto #{repo_root} pull -s #{config['stack']} -v --use-default-message #{m} #{color_flag}"
        system(cmd) == true or raise "failed do cmd: #{cmd}"
        
        misc_modules << m

    end
end


sources_list.each do |src|

    cmd = "cd #{project_id}/#{src} && rm -rf cpanlib && svn up "
    st = system(cmd) == true or  raise "failed do cmd: #{cmd}" 

    cmd = "export version_postfix='#{version_postfix}' && cd #{project_id}/#{src} && rm -rf *.gz && rm -rf MANIFEST && perl Build.PL --quiet 1>/dev/null 2>module_build.err.log  && ./Build realclean && perl Build.PL --quiet 1>/dev/null 2>module_build.err.log && ./Build manifest --quiet 2>/dev/null 1>/dev/null  && ./Build dist --quiet 1>/dev/null"
    system(cmd) == true or raise "failed do cmd: #{cmd}"

    distro_name = `cd #{project_id}/#{src} &&  ls *.gz`.chomp!

    
    if opts[:skip_pinto] == true

        compile_list << distro_name
	compile_list_pp[distro_name] = src

    else

	if opts[:no_color] == true
	    puts "add #{src} [#{distro_name}] to pinto"
	else
    	    puts dark { magenta  { bold {  "add #{src} [#{distro_name}] to pinto" } } }
        end
    
	unless override == false
		cmd ="cd #{project_id}/#{src} && pinto #{repo_root} delete -v PINTO/#{distro_name} #{color_flag}"
        	system(cmd) == true
	end

	cmd ="cd #{project_id}/#{src} && pinto #{repo_root} add  -s #{config['stack']} -v --use-default-message #{distro_name} #{color_flag}"
        system(cmd) == true or raise "failed do cmd: #{cmd}"

        compile_list << distro_name
        compile_list_pp[distro_name] = src

    end
    
end

unless opts[:only_pinto] == true 

	misc_modules.each do |m|

	    if opts[:no_color] == true
		puts "compile #{m}"
	    else
		puts green { bold { "compile #{m}" } }
	    end
    
	    cmd = "pinto #{repo_root} install -s #{config['stack']} -l #{local_lib} -o 'q' #{m} #{color_flag}"
	    system(cmd) == true or raise "failed do cmd: #{cmd}"
	end


	compile_list.each do |d|

	    if opts[:no_color] == true
		puts "compile #{compile_list_pp[d]} [#{d}]"
	    else
		puts green { bold { "compile #{compile_list_pp[d]} [#{d}]" } }
	    end
    
	    cmd = "pinto #{repo_root} install -s #{config['stack']} -l #{local_lib} -o 'q' PINTO/#{d} #{color_flag}"
	    system(cmd) == true or raise "failed do cmd: #{cmd}"

	end

	if only_list.empty? or only_list.include? config['application']

		if opts[:no_color] == true
		    puts "make distributive from #{config['application']}"
		else
		    puts yellow { bold {  "make distributive from #{config['application']}" } } 
		end 

		cmd = "export version_postfix='#{version_postfix}' && cd #{project_id}/#{config['application']} && rm -rf cpanlib && mkdir cpanlib/ && cp -r #{local_lib}/* cpanlib/ && rm -rf *.gz && ./Build realclean --quiet 1>/dev/null && perl Build.PL --quiet 1>/dev/null 2>module_build.err.log && ./Build manifest --quiet 2>/dev/null 1>/dev/null && ./Build dist --quiet 1>/dev/null && ln -fs `ls #{project_id}/#{config['application']}/*.gz` #{project_id}/current.tar.gz && echo -n `ls *.gz` > #{project_id}/current.txt"
		puts cmd
		system(cmd) == true or raise "failed do cmd: #{cmd}"


		if opts[:no_color] == true
		    puts "testing #{config['application']}"
		else
		    puts cyan { bold {  "testing #{config['application']}" } }
		end 

		cmd = "cd #{project_id} && pinto #{repo_root} install -s #{config['stack']} -l #{local_lib} -o 'test-only' PINTO/`cat current.txt` #{color_flag}"
		system(cmd) == true or raise "failed do cmd: #{cmd}"

	end

end

